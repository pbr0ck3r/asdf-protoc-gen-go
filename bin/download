#!/usr/bin/env bash

set -euo pipefail

# copy of PWD in case something changes it, PWD should be the directory where
#   asdf install protoc-gen-go
# is being called from
WORKING_DIR=$PWD

current_script_path=${BASH_SOURCE[0]}
plugin_dir=$(dirname "$(dirname "$current_script_path")")

# shellcheck source=../lib/utils.bash
source "${plugin_dir}/lib/utils.bash"

mkdir -p "$ASDF_DOWNLOAD_PATH"

# TODO: Adapt this to proper extension and adapt extracting strategy.
release_file="$ASDF_DOWNLOAD_PATH/$TOOL_NAME-$ASDF_INSTALL_VERSION.tar.gz"

# Download tar.gz file to the download directory
download_release "$ASDF_INSTALL_VERSION" "$release_file"

#  Extract contents of tar.gz file into the download directory
tar -xzf "$release_file" -C "$ASDF_DOWNLOAD_PATH" --strip-components=1 || fail "Could not extract $release_file"

# Build protoc-gen-go binary
pushd "$ASDF_DOWNLOAD_PATH"/cmd/$TOOL_NAME >/dev/null 2>&1 || exit 1
# if we find a .tool-versions in the working directory (eg, the one asdf install is being called
# from), we'll check for golang in that directory and if it's there, add that same version to
# the checkout so that the build of protoc-gen-go below will use that version.
if test -f $WORKING_DIR/.tool-versions ; then
  if grep golang $WORKING_DIR/.tool-versions > /dev/null 2>&1 ; then
    grep golang $WORKING_DIR/.tool-versions > .tool-versions
  fi
fi
go build || fail "Could not build $TOOL_NAME from $ASDF_DOWNLOAD_PATH"
popd >/dev/null 2>&1 || exit 1

# Remove the tar.gz file since we don't need to keep it
rm "$release_file"
